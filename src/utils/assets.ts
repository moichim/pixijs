import { Assets, ResolverManifest } from 'pixi.js';

let assetsManifest: ResolverManifest = { bundles: [] }

const loadedBundles: string[] = [];

function checkBundleExists( bundle: string ) {
    return !assetsManifest.bundles.find( b => b.name === bundle );
}

export async function loadBundles( bundles: string|string[] ) {
    if ( typeof bundles === "string" ) bundles = [bundles];

    for ( const bundle of bundles ) {
        if ( !checkBundleExists( bundle ) ) {
            throw new Error(`[Assets] Invalid bundle: ${bundle}`);
        }

        const loadList = bundles.filter( bundle => loadedBundles.includes( bundle ) );

        if ( !loadList.length ) return;

        console.log( "[Assets] Load:", loadList.join( ", " ) );

        await Assets.loadBundle( loadList );

        loadedBundles.push( ...loadList );

    }
}

/** Check if all bundles are loaded, return false if any of them is not loaded yet  */
export function areBundlesLoaded(bundles: string[]) {
    for (const name of bundles) {
        // Return false if a single bundle is not present in the loaded list
        if (!loadedBundles.includes(name)) {
            return false;
        }
    }

    // All provided bundles are loaded
    return true;
}

/** Load the assets json manifest generated by assetpack */
async function fetchAssetsManifest(url: string) {
    const response = await fetch(url);
    const manifest = await response.json();
    if (!manifest.bundles) {
        throw new Error('[Assets] Invalid assets manifest');
    }
    return manifest;
}

/** Initialise and start background loading of all assets */
export async function initAssets() {
    // Load assets manifest
    assetsManifest = await fetchAssetsManifest('assets/assets-manifest.json');

    // Init PixiJS assets with this asset manifest
    await Assets.init({ manifest: assetsManifest, basePath: 'assets' });

    // Load assets for the load screen
    await loadBundles('preload');

    // List all existing bundles names
    const allBundles = assetsManifest.bundles.map((item) => item.name);

    // Start up background loading of all bundles
    Assets.backgroundLoadBundle(allBundles);
}
